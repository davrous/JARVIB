// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

/*
All of these responses where generated by GPT using a prompt similar to:

```
Here's a JavaScript string literal template:

`I couldn't find a ${item} on your ${list} list.`

Create a JavaScript array with 7 variations of the template.
The variations should be helpful, creative, clever, and very friendly.
The variations should always use the back tick `` syntax.
The variations should always include ${item} and ${list} variables.
```

7 variations were asked for so that we can remove the 2 we like the least.
*/

/**
 *
 */
export function greeting(): string {
    return getRandomResponse([
        "Hi! I'm J.A.R.V.I.B, I'm here to help you building dynamic 3D worlds. Ask me to create Babylon.js code or to find and load some 3D models. Type /reset to clean the context."
    ]);
}

/**
 *
 */
export function reset(): string {
    return getRandomResponse([
        'Resetting the context. A fresh world is available to you now.',
        'Starting fresh. The context has been cleaned.',
        "I've cleaned the house. Ready for new ideas!",
        "Cleaning slate. Let's rebuild the world."
    ]);
}

/**
 * Generates a response message for when an item is not found on a list.
 * @param {string} list The name of the list.
 * @param {string} item The name of the item.
 * @returns {string} The response message.
 */
export function itemNotFound(item: string): string {
    return getRandomResponse([
        `I'm sorry, I couldn't locate a ${item} on your list.`,
        `I don't see a ${item} on your list.`,
        `It looks like you don't have a ${item} on your list.`,
        `I'm sorry, I don't see a ${item} on your list.`,
        `I couldn't find a ${item} listed on your list.`
    ]);
}

/**
 * Generates a response message for when an item is found on a list.
 * @param {string} list The name of the list.
 * @param {string} item The name of the item.
 * @returns {string} The response message.
 */
export function itemFound(item: string, code: string): string {
    return getRandomResponse([
        `Loading model ${item} from your list using code: ${code}`,
        `We're loading the ${item} model using following code: ${code}`,
        `Ok, we found a ${item} model and we're loading it using this code: ${code}`
    ]);
}

/**
 * @param action
 */
export function unknownAction(action: string): string {
    return getRandomResponse([
        `I'm sorry, I'm not sure how to ${action}.`,
        `I don't know the first thing about ${action}.`,
        `I'm not sure I'm the best person to help with ${action}.`,
        `I'm still learning about ${action}, but I'll try my best.`,
        `I'm afraid I'm not experienced enough with ${action}.`
    ]);
}

/**
 *
 */
export function offTopic(): string {
    return getRandomResponse([
        `I'm sorry, I'm not sure I can help you with that.`,
        `I'm sorry, I'm afraid I'm not allowed to talk about such things.`,
        `I'm sorry, I'm not sure I'm the right person to help you with that.`,
        `I wish I could help you with that, but it's not something I can talk about.`,
        `I'm sorry, I'm not allowed to discuss that topic.`
    ]);
}

/**
 * @param responses
 */
function getRandomResponse(responses: string[]): string {
    const i = Math.floor(Math.random() * (responses.length - 1));
    // eslint-disable-next-line security/detect-object-injection
    return responses[i];
}
